// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: minimaltest.proto

package minimaltest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MinimalTest_PutPair_FullMethodName = "/minimaltest.MinimalTest/PutPair"
	MinimalTest_GetPair_FullMethodName = "/minimaltest.MinimalTest/GetPair"
)

// MinimalTestClient is the client API for MinimalTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MinimalTestClient interface {
	PutPair(ctx context.Context, in *PutPairRequest, opts ...grpc.CallOption) (*PairResponse, error)
	GetPair(ctx context.Context, in *GetPairRequest, opts ...grpc.CallOption) (*PairResponse, error)
}

type minimalTestClient struct {
	cc grpc.ClientConnInterface
}

func NewMinimalTestClient(cc grpc.ClientConnInterface) MinimalTestClient {
	return &minimalTestClient{cc}
}

func (c *minimalTestClient) PutPair(ctx context.Context, in *PutPairRequest, opts ...grpc.CallOption) (*PairResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PairResponse)
	err := c.cc.Invoke(ctx, MinimalTest_PutPair_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minimalTestClient) GetPair(ctx context.Context, in *GetPairRequest, opts ...grpc.CallOption) (*PairResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PairResponse)
	err := c.cc.Invoke(ctx, MinimalTest_GetPair_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MinimalTestServer is the server API for MinimalTest service.
// All implementations must embed UnimplementedMinimalTestServer
// for forward compatibility.
type MinimalTestServer interface {
	PutPair(context.Context, *PutPairRequest) (*PairResponse, error)
	GetPair(context.Context, *GetPairRequest) (*PairResponse, error)
	mustEmbedUnimplementedMinimalTestServer()
}

// UnimplementedMinimalTestServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMinimalTestServer struct{}

func (UnimplementedMinimalTestServer) PutPair(context.Context, *PutPairRequest) (*PairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutPair not implemented")
}
func (UnimplementedMinimalTestServer) GetPair(context.Context, *GetPairRequest) (*PairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPair not implemented")
}
func (UnimplementedMinimalTestServer) mustEmbedUnimplementedMinimalTestServer() {}
func (UnimplementedMinimalTestServer) testEmbeddedByValue()                     {}

// UnsafeMinimalTestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MinimalTestServer will
// result in compilation errors.
type UnsafeMinimalTestServer interface {
	mustEmbedUnimplementedMinimalTestServer()
}

func RegisterMinimalTestServer(s grpc.ServiceRegistrar, srv MinimalTestServer) {
	// If the following call pancis, it indicates UnimplementedMinimalTestServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MinimalTest_ServiceDesc, srv)
}

func _MinimalTest_PutPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinimalTestServer).PutPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MinimalTest_PutPair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinimalTestServer).PutPair(ctx, req.(*PutPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinimalTest_GetPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinimalTestServer).GetPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MinimalTest_GetPair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinimalTestServer).GetPair(ctx, req.(*GetPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MinimalTest_ServiceDesc is the grpc.ServiceDesc for MinimalTest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MinimalTest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "minimaltest.MinimalTest",
	HandlerType: (*MinimalTestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutPair",
			Handler:    _MinimalTest_PutPair_Handler,
		},
		{
			MethodName: "GetPair",
			Handler:    _MinimalTest_GetPair_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "minimaltest.proto",
}
